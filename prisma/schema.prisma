generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  createdAt     DateTime        @default(now())
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  updatedAt     DateTime        @updatedAt
  isBlocked     Boolean         @default(false)
  accounts      Account[]
  Deal          Deal[]
  files         File[]
  reviews       Review[]
  sessions      Session[]
  assignedTasks Task[]          @relation("TaskAssignee")
  createdTasks  Task[]          @relation("TaskCreator")
  UserActionLog UserActionLog[]
  Rollups       Rollup[]        @relation("UserRollups")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Deal {
  id              String         @id @default(cuid())
  brokerage       String
  firstName       String?
  lastName        String?
  linkedinUrl     String?
  workPhone       String?
  dealCaption     String
  revenue         Float
  ebitda          Float
  title           String?
  grossRevenue    Float?
  askingPrice     Float?
  ebitdaMargin    Float
  industry        String
  dealType        DealType       @default(MANUAL)
  sourceWebsite   String
  companyLocation String?
  createdAt       DateTime       @default(now())
  email           String?
  updatedAt       DateTime       @default(now()) @updatedAt
  bitrixCreatedAt DateTime?
  bitrixId        String?
  userId          String?
  dealTeaser      String?
  tags            String[]       @default([])
  bitrixLink      String?
  isPublished     Boolean        @default(false)
  isReviewed      Boolean        @default(false)
  status          DealStatus     @default(NOT_SPECIFIED)
  seen            Boolean        @default(false)
  chunk_text      String?
  description     String?
  rollupId        String?
  AiScreening     AiScreening[]
  rollup          Rollup?        @relation("RollupDeals", fields: [rollupId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])
  DealDocument    DealDocument[]
  Employee        Employee[]
  POC             POC[]
  SIM             SIM[]
}

model DealDocument {
  id          String               @id @default(cuid())
  dealId      String
  title       String
  description String?
  category    DealDocumentCategory @default(OTHER)
  documentUrl String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deal        Deal                 @relation(fields: [dealId], references: [id], onDelete: Cascade)
}

model POC {
  id        String  @id @default(cuid())
  name      String
  workPhone String?
  email     String
  dealId    String?
  Deal      Deal?   @relation(fields: [dealId], references: [id], onDelete: Cascade)
}

model SIM {
  id        String    @id @default(cuid())
  title     String
  caption   String
  status    SIMStatus
  fileName  String
  fileType  String
  fileUrl   String
  dealId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deal      Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
}

model Questionnaire {
  id         String   @id @default(cuid())
  fileUrl    String
  title      String
  purpose    String
  author     String
  version    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("questionnaires")
}

model Screener {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  content     String
  fileUrl     String
  name        String
  description String?
  AiScreening AiScreening[]
}

model AiScreening {
  id          String    @id @default(cuid())
  dealId      String
  title       String
  explanation String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sentiment   Sentiment @default(NEUTRAL)
  content     String?
  score       Int?
  screenerId  String?
  deal        Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  screener    Screener? @relation(fields: [screenerId], references: [id], onDelete: Cascade)
}

model UserActionLog {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Employee {
  id     String  @id @default(cuid())
  name   String
  dealId String?
  Deal   Deal?   @relation(fields: [dealId], references: [id])
}

model Rollup {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  summary     String?
  deals       Deal[]   @relation("RollupDeals")
  users       User[]   @relation("UserRollups")
}

model Company {
  id           String                @id @default(cuid())
  name         String
  website      String?
  sector       String?
  stage        CompanyStage?
  headquarters String?
  description  String?
  revenue      Float?
  ebitda       Float?
  growthRate   Float?
  employees    Int?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  sections     DueDiligenceSection[]
  files        File[]
  founders     Founder[]
  reviews      Review[]
  tasks        Task[]
}

model Founder {
  id        String   @id @default(cuid())
  name      String
  title     String?
  email     String?
  linkedin  String?
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model File {
  id           String       @id @default(cuid())
  title        String
  description  String?
  category     FileCategory
  tags         String[]     @default([])
  fileUrl      String
  fileName     String
  fileSize     Int?
  mimeType     String?
  version      String       @default("1.0")
  isLatest     Boolean      @default(true)
  companyId    String
  uploadedById String
  comments     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])
}

model DueDiligenceSection {
  id          String                  @id @default(cuid())
  title       String
  description String?
  type        DueDiligenceSectionType
  status      SectionStatus           @default(PENDING)
  notes       String?
  findings    String?
  companyId   String
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  company     Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reviews     Review[]
  tasks       Task[]
}

model Review {
  id         String               @id @default(cuid())
  title      String
  content    String
  riskLevel  RiskLevel            @default(MEDIUM)
  confidence Int?
  companyId  String
  sectionId  String?
  reviewerId String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  company    Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reviewer   User                 @relation(fields: [reviewerId], references: [id])
  section    DueDiligenceSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Task {
  id           String               @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus           @default(ASSIGNED)
  priority     Int?                 @default(3)
  dueDate      DateTime?
  completedAt  DateTime?
  companyId    String
  sectionId    String?
  assignedToId String
  createdById  String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  assignedTo   User                 @relation("TaskAssignee", fields: [assignedToId], references: [id])
  company      Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy    User                 @relation("TaskCreator", fields: [createdById], references: [id])
  section      DueDiligenceSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum DealStatus {
  AVAILABLE
  SOLD
  UNDER_CONTRACT
  NOT_SPECIFIED
}

enum DealDocumentCategory {
  LEGAL
  DOCUMENTATION
  MARKETING
  INVESTOR_RELATIONSHIPS
  TECHNICAL
  TOOLS
  LEGISLATION
  RESEARCH
  PROSPECTUS
  FINANCIALS
  OTHER
}

enum DealType {
  SCRAPED
  MANUAL
  AI_INFERRED
}

enum SIMStatus {
  IN_PROGRESS
  COMPLETED
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum CompanyStage {
  STARTUP
  GROWTH
  MATURE
  TURNAROUND
  DISTRESSED
}

enum FileCategory {
  FINANCIALS
  LEGAL
  TAX
  TECHNICAL
  COMMERCIAL
  ESG
  MARKETING
  OPERATIONS
  OTHER
}

enum DueDiligenceSectionType {
  FINANCIAL
  LEGAL
  TAX
  TECHNICAL
  COMMERCIAL
  ESG
  OPERATIONAL
  MARKET
  MANAGEMENT
}

enum SectionStatus {
  PENDING
  IN_REVIEW
  DONE
  BLOCKED
}

enum TaskStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
