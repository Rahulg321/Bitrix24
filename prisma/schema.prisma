generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isBlocked     Boolean         @default(false)
  UserActionLog UserActionLog[]
  Deal          Deal[]
  Rollups       Rollup[]        @relation("UserRollups")

  files         File[]
  reviews       Review[]
  assignedTasks Task[]   @relation("TaskAssignee")
  createdTasks  Task[]   @relation("TaskCreator")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DealStatus {
  AVAILABLE
  SOLD
  UNDER_CONTRACT
  NOT_SPECIFIED
}

model Deal {
  id              String        @id @default(cuid())
  brokerage       String
  firstName       String?
  lastName        String?
  tags            String[]      @default([])
  email           String?
  linkedinUrl     String?
  workPhone       String?
  dealCaption     String
  revenue         Float
  ebitda          Float
  title           String?
  dealTeaser      String?
  grossRevenue    Float?
  askingPrice     Float?
  ebitdaMargin    Float
  industry        String
  dealType        DealType      @default(MANUAL)
  sourceWebsite   String
  companyLocation String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  SIM             SIM[]
  AiScreening     AiScreening[]

  bitrixLink  String?
  status      DealStatus @default(NOT_SPECIFIED)
  isReviewed  Boolean    @default(false)
  isPublished Boolean    @default(false)
  seen        Boolean    @default(false)

  bitrixId        String?
  bitrixCreatedAt DateTime?

  userId       String?
  user         User?          @relation(fields: [userId], references: [id])
  POC          POC[]
  DealDocument DealDocument[]
  Employee     Employee[]

  rollupId    String? // optional
  rollup      Rollup? @relation("RollupDeals", fields: [rollupId], references: [id])
  chunk_text  String?
  description String?
}

model DealDocument {
  id          String               @id @default(cuid())
  dealId      String
  title       String
  description String?
  category    DealDocumentCategory @default(OTHER)
  deal        Deal                 @relation(fields: [dealId], references: [id], onDelete: Cascade)
  documentUrl String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

enum DealDocumentCategory {
  LEGAL
  DOCUMENTATION
  MARKETING
  INVESTOR_RELATIONSHIPS
  TECHNICAL
  TOOLS
  LEGISLATION
  RESEARCH
  PROSPECTUS
  FINANCIALS
  OTHER
}

model POC {
  id        String  @id @default(cuid())
  name      String
  workPhone String?
  email     String
  Deal      Deal?   @relation(fields: [dealId], references: [id], onDelete: Cascade)
  dealId    String?
}

model SIM {
  id        String    @id @default(cuid())
  title     String
  caption   String
  status    SIMStatus
  fileName  String
  fileType  String
  fileUrl   String
  dealId    String
  deal      Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Questionnaire {
  id         String   @id @default(cuid())
  fileUrl    String
  title      String
  purpose    String
  author     String
  version    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("questionnaires")
}

enum DealType {
  SCRAPED
  MANUAL
  AI_INFERRED
}

enum SIMStatus {
  IN_PROGRESS
  COMPLETED
}

model Screener {
  id          String        @id @default(cuid())
  name        String
  description String?
  content     String
  fileUrl     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AiScreening AiScreening[]
}

model AiScreening {
  id          String    @id @default(cuid())
  dealId      String
  deal        Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  title       String
  explanation String
  score       Int?
  content     String?
  sentiment   Sentiment @default(NEUTRAL)

  screenerId String?
  screener   Screener? @relation(fields: [screenerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

model UserActionLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id   String @id @default(cuid())
  name String

  Deal   Deal?   @relation(fields: [dealId], references: [id])
  dealId String?
}

model Rollup {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  summary     String?

  deals Deal[] @relation("RollupDeals")
  users User[] @relation("UserRollups")
}

// Due Diligence Models

enum CompanyStage {
  STARTUP
  GROWTH
  MATURE
  TURNAROUND
  DISTRESSED
}

enum FileCategory {
  FINANCIALS
  LEGAL
  TAX
  TECHNICAL
  COMMERCIAL
  ESG
  MARKETING
  OPERATIONS
  OTHER
}

enum DueDiligenceSectionType {
  FINANCIAL
  LEGAL
  TAX
  TECHNICAL
  COMMERCIAL
  ESG
  OPERATIONAL
  MARKET
  MANAGEMENT
}

enum SectionStatus {
  PENDING
  IN_REVIEW
  DONE
  BLOCKED
}

enum TaskStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Company {
  id           String        @id @default(cuid())
  name         String
  website      String?
  sector       String?
  stage        CompanyStage?
  headquarters String?
  description  String?

  // Financial summary
  revenue    Float?
  ebitda     Float?
  growthRate Float?
  employees  Int?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  files    File[]
  sections DueDiligenceSection[]
  reviews  Review[]
  tasks    Task[]
  founders Founder[]
}

model Founder {
  id        String   @id @default(cuid())
  name      String
  title     String?
  email     String?
  linkedin  String?
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id          String       @id @default(cuid())
  title       String
  description String?
  category    FileCategory
  tags        String[]     @default([])
  fileUrl     String
  fileName    String
  fileSize    Int?
  mimeType    String?

  version  String  @default("1.0")
  isLatest Boolean @default(true)

  companyId    String
  company      Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy   User    @relation(fields: [uploadedById], references: [id])

  comments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DueDiligenceSection {
  id          String                  @id @default(cuid())
  title       String
  description String?
  type        DueDiligenceSectionType
  status      SectionStatus           @default(PENDING)
  notes       String?
  findings    String?

  // Relationships
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reviews   Review[]
  tasks     Task[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String    @id @default(cuid())
  title      String
  content    String
  riskLevel  RiskLevel @default(MEDIUM)
  confidence Int? // 1-10 scale

  // Relationships
  companyId  String
  company    Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sectionId  String?
  section    DueDiligenceSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  reviewerId String
  reviewer   User                 @relation(fields: [reviewerId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(ASSIGNED)
  priority    Int?       @default(3) // 1-5 scale, 1 being highest

  // Due date
  dueDate     DateTime?
  completedAt DateTime?

  // Relationships
  companyId    String
  company      Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sectionId    String?
  section      DueDiligenceSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  assignedToId String
  assignedTo   User                 @relation("TaskAssignee", fields: [assignedToId], references: [id])
  createdById  String
  createdBy    User                 @relation("TaskCreator", fields: [createdById], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
